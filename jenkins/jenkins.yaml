jenkins:
  systemMessage: "Jenkins configured automatically by Jenkins Configuration as Code plugin\n\n"
  crumbIssuer: "standard"
  securityRealm:
    local: # Only for hardcode admin login | Recommend using ldap in production
      allowsSignup: false
      users:
       - id: ${JENKINS_ADMIN_ID}
         password: ${JENKINS_ADMIN_PASSWORD}
    
  #   ldap:
  #     configurations:
  #     - groupSearchFilter: "(& (cn={0}) (objectclass=posixGroup) )"
  #       inhibitInferRootDN: false
  #       managerDN: "cn=service,ou=Users,dc=acme,dc=local"
  #       managerPasswordSecret: ${LDAP_SERVICE_PASSWORD}
  #       rootDN: "dc=acme,dc=local"
  #       server: "ldap://slapd:389"
  #     disableMailAddressResolver: false
  #     disableRolePrefixing: true
  #     groupIdStrategy: "caseInsensitive"
  #     userIdStrategy: "caseInsensitive"
  
  # authorizationStrategy: 
  #   globalMatrix:
  #     grantedPermissions:
  #       - "Job/Build:authenticated"
  #       - "Job/Cancel:authenticated"
  #       - "Job/Read:authenticated"
  #       - "Overall/Administer:Acme Superusers"
  #       - "Overall/Read:authenticated"
  #       - "View/Read:authenticated"

    # loggedInUsersCanDoAnything: # For testing only
    #   allowAnonymousRead: false

  # remotingSecurity:
  #   enabled: true

  # agentProtocols:
  # - "JNLP4-connect"
  # - "Ping"

  # slaveAgentPort: 50000

  # nodes:
  # - permanent:
  #     name: "agent-java"
  #     labelString: "java-label"
  #     numExecutors: 2
  #     remoteFS: "/opt/jenkins_workspace/"
  #     launcher:
  #       ssh:
  #         credentialsId: "BUILD_AGENT_SSH_KEY"
  #         host: "agent-java"
  #         port: 22
  #         sshHostKeyVerificationStrategy:
  #           manuallyTrustedKeyVerificationStrategy:
  #             requireInitialManualTrust: false
  #     retentionStrategy: "always"
  # views:
  # # - list:
  # #     columns:
  # #     - "status"
  # #     - "weather"
  # #     - "jobName"
  # #     - "lastSuccess"
  # #     - "lastFailure"
  # #     - "lastDuration"
  # #     - "buildButton"
  # #     - "coverageTotalsColumn"
  # #     - "favoriteColumn"
  # #     includeRegex: ".*.service.*"
  # #     name: "Hipster Shop"
  # - all:
  #     name: "all"
  # viewsTabBar: "standard"

credentials:
  system:
    domainCredentials:
    - credentials:
      - string:
          id: 'SONAR_USER'
          secret: ${SONAR_USER}
          description: 'Sonar user'
          scope: GLOBAL
      - string:
          id: 'SONAR_PASSWORD'
          secret: ${SONAR_PASSWORD}
          description: 'Sonar password'
          scope: GLOBAL
      - string:
          id: 'SONAR_TOKEN'
          secret: ${SONAR_TOKEN}
          description: 'Sonar token'
          scope: GLOBAL
      - string:
          id: 'NEXUS_TOKEN'
          secret: ${NEXUS_TOKEN}
          description: 'Nexus token'
          scope: GLOBAL
      - string:
          id: 'SLACK_TOKEN'
          secret: ${SLACK_TOKEN}
          description: 'Slack token'
          scope: GLOBAL
      - string:
          id: 'GITHUB_TOKEN'
          secret: ${GITHUB_TOKEN}
          description: 'Github token'
          scope: GLOBAL
      - usernamePassword:
          description: "Container Registry Credentials"
          id: "CONTAINER_RESIGTRY"
          password: ${CONTAINER_REGISTRY_PASSWORD}
          scope: GLOBAL
          username: ${CONTAINER_REGISTRY_USER}
      - file:
          description: "KUBECONFIG"
          fileName: "config"
          id: "KUBECONFIG"
          scope: GLOBAL
          secretBytes: ${fileBase64:~/.kube/config}
# unclassified:
#   location:
#     url: ${JENKINS_URL}
#   slackNotifier:
#     teamDomain: ${SLACK_TEAM_DOMAIN}
#     baseUrl: ${SLACK_BASE_URL}
#     tokenCredentialId: slackToken
#   sonarGlobalConfiguration:
#     buildWrapperEnabled: true
#     installations:
#       - name: SonarQubeServer
#         credentialsId: 'sonarToken'
#         serverUrl: ${SONAR_URL}
#         webhookSecretId: webhook
#         mojoVersion: ""
#         additionalAnalysisProperties: ""
#         additionalProperties: ""
#         triggers:
#           envVar: ""
#           skipScmCause: false
#           skipUpstreamCause: false

tool:
  git:
    installations:
      - name: git
        home: /usr/bin/git
  # docker:
  #   installations:
  #     - name: docker
  #       home: /usr/bin/docker
  # terraform:
  #   installations:
  #     - name: terraform
  #       home: /usr/local/bin/terraform
  # kubectl:
  #   installations:
  #     - name: kubectl
  #       home: /usr/local/bin/kubectl
  # sonarRunnerInstallation:
  #   installations:
  #   - name: "sonarqube-scanner"
  #     properties:
  #     - installSource:
  #         installers:
  #         - sonarRunnerInstaller:
  #             id: "5.0.1.3006"

jobs:
  - script: >
      pipelineJob('configuration-as-code') {}
#       def microservices = ["adservice", "cartservice", "checkoutservice", "currencyservice", "emailservice", "frontend", 
#       "loadgenerator", "paymentservice", "productcatalogservice", "recommendationservice", "shippingservice"]

#       microservices.each { jobName ->
#           pipelineJob(jobName) {
#               definition {
#                   cpsScm {
#                       scm {
#                           git {
#                               remote {
#                                   url('https://gitlab.com/gitops-freddieentity/application')
#                               }
#                               branch('*/main')
#                           }
#                       }
#                       scriptPath(jobName + '/Jenkinsfile')
#                   }
#               }
#           }
#       }