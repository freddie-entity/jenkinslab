jenkins:
  systemMessage: "Jenkins configured automatically by Jenkins Configuration as Code plugin\n\n"
  crumbIssuer: "standard"
  securityRealm:
    # local: # Only for hardcode admin login | Recommend using ldap in production
    #   allowsSignup: false
    #   users:
    #    - id: ${JENKINS_ADMIN_ID}
    #      password: ${JENKINS_ADMIN_PASSWORD}
    
  #   ldap:
  #     configurations:
  #     - groupSearchFilter: "(& (cn={0}) (objectclass=posixGroup) )"
  #       inhibitInferRootDN: false
  #       managerDN: "cn=service,ou=Users,dc=acme,dc=local"
  #       managerPasswordSecret: ${LDAP_SERVICE_PASSWORD}
  #       rootDN: "dc=acme,dc=local"
  #       server: "ldap://slapd:389"
  #     disableMailAddressResolver: false
  #     disableRolePrefixing: true
  #     groupIdStrategy: "caseInsensitive"
  #     userIdStrategy: "caseInsensitive"
  
  # authorizationStrategy: 
  #   globalMatrix:
  #     grantedPermissions:
  #       - "Job/Build:authenticated"
  #       - "Job/Cancel:authenticated"
  #       - "Job/Read:authenticated"
  #       - "Overall/Administer:Acme Superusers"
  #       - "Overall/Read:authenticated"
  #       - "View/Read:authenticated"

    # loggedInUsersCanDoAnything: # For testing only
    #   allowAnonymousRead: false

  # remotingSecurity:
  #   enabled: true

  # agentProtocols:
  # - "JNLP4-connect"
  # - "Ping"

  # slaveAgentPort: 50000

  # nodes:
  # - permanent:
  #     name: "agent-java"
  #     labelString: "java-label"
  #     numExecutors: 2
  #     remoteFS: "/opt/jenkins_workspace/"
  #     launcher:
  #       ssh:
  #         credentialsId: "BUILD_AGENT_SSH_KEY"
  #         host: "agent-java"
  #         port: 22
  #         sshHostKeyVerificationStrategy:
  #           manuallyTrustedKeyVerificationStrategy:
  #             requireInitialManualTrust: false
  #     retentionStrategy: "always"

credentials:
  system:
    domainCredentials:
    - credentials:
      - string:
          id: 'sonarUser'
          secret: ${SONAR_USER}
          description: 'Sonar user'
          scope: GLOBAL
      - string:
          id: 'sonarPassword'
          secret: ${SONAR_PASSWORD}
          description: 'Sonar password'
          scope: GLOBAL
      - string:
          id: 'dockerHubUser'
          secret: ${DOCKERHUB_USER}
          description: 'Docker Hub User'
          scope: GLOBAL
      - string:
          id: 'dockerHubPassword'
          secret: ${DOCKERHUB_PASSWORD}
          description: 'Docker Hub Password'
          scope: GLOBAL
      - string:
          id: 'sonarToken'
          secret: ${SONAR_TOKEN}
          description: 'Sonar token'
          scope: GLOBAL
      - string:
          id: 'nexusToken'
          secret: ${NEXUS_TOKEN}
          description: 'Nexus token'
          scope: GLOBAL
      - string:
          id: 'slackToken'
          secret: ${SLACK_TOKEN}
          description: 'Slack token'
          scope: GLOBAL
unclassified:
  location:
    url: ${JENKINS_URL}
  slackNotifier:
    teamDomain: ${SLACK_TEAM_DOMAIN}
    baseUrl: ${SLACK_BASE_URL}
    tokenCredentialId: slackToken
  sonarGlobalConfiguration:
    buildWrapperEnabled: true
    installations:
      - name: SonarQubeServer
        credentialsId: 'sonarToken'
        serverUrl: ${SONAR_URL}
        webhookSecretId: webhook
        mojoVersion: ""
        additionalAnalysisProperties: ""
        additionalProperties: ""
        triggers:
          envVar: ""
          skipScmCause: false
          skipUpstreamCause: false

tool:
  git:
    installations:
      - name: git
        home: /usr/local/bin/git
  # jdk:
  #   installations:
  #     - home: "/usr/lib/jvm/java-1.8.0-amazon-corretto/"
  #       name: 'JDK8'
  maven:
    installations:
      - name: maven3
        home: "/maven3"
        properties:
          - installSource:
              installers:
                - maven:
                    id: "3.8.4"

jobs:
  - script: >
      def microservices = ["adservice", "cartservice", "checkoutservice", "currencyservice", "emailservice", "frontend", 
      "loadgenerator", "paymentservice", "productcatalogservice", "recommendationservice", "shippingservice"]

      microservices.each { jobName ->
          pipelineJob(jobName) {
              definition {
                  cpsScm {
                      scm {
                          git {
                              remote {
                                  url('https://gitlab.com/gitops-freddieentity/application')
                              }
                              branch('*/main')
                          }
                      }
                      scriptPath(jobName + '/Jenkinsfile')
                  }
              }
          }
      }
